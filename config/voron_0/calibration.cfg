#####################################################################
# 各种调试宏脚本
#####################################################################

## PID加热棒测试
[gcode_macro PID_HOTEND]
description: PID加热棒测试。使用方法：PID_HOTEND
gcode:
  M106 S64                                     #模型风扇转速25%
  PID_CALIBRATE HEATER=extruder TARGET=245     #目标温度245度

## PID热床测试
[gcode_macro PID_BED]
description: PID热床测试。使用方法：PID_BED
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=100   #目标温度100度

## 测试电机是否正常运转
[gcode_macro TEST_STEPPER]
description: 测试电机是否正常运转及运转方向是否正常。使用方法：TEST_STEPPER STEPPER=x
gcode:
  {% set stepper = params.STEPPER|default(输入电机名称)|lower %}
  M118 即将测试{stepper}轴电机运转情况
  {% if stepper in ["x","y"] %}
    M118 请从{stepper}传动轮正上方观察并确认，是否先顺时针后逆时针摆动
  {% endif %}
  {% if stepper in ["z"] %}
    M118 请从{stepper}轴滑块固定处观察并确认，是否先下后上移动
  {% endif %}
  STEPPER_BUZZ STEPPER=stepper_{stepper}
  M118 {stepper}轴电机运转测试完毕

## 一次性测试电机是否正常运转
[gcode_macro TEST_ALL_STEPPERS]
description: 一次性测试电机是否正常运转。使用方法：TEST_ALL_STEPPERS
gcode:    
  M118 请从X传动轮正上方观察并确认，是否先顺时针后逆时针摆动
  G4 S3
  STEPPER_BUZZ STEPPER=stepper_x            #测试X电机
  M118 请从Y传动轮正上方观察并确认，是否先顺时针后逆时针摆动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_y            #测试Y电机
  M118 请从Z轴滑块固定处观察并确认，是否先下后上移动
  G4 S3                                     #暂停3秒
  STEPPER_BUZZ STEPPER=stepper_z            #测试Z电机

## 设置XY电机运转电流
[gcode_macro SET_XY_STEPPERS_CURRENT]
description: 设置XY电机运转电流。使用方法：SET_XY_STEPPERS_CURRENT CURRENT=0.8
gcode:
  {% set current = params.CURRENT|default(输入电机电流)|float %}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={current}

## 设置Z电机运转电流
[gcode_macro SET_Z_STEPPERS_CURRENT]
description: 设置Z电机运转电流。使用方法：SET_Z_STEPPERS_CURRENT CURRENT=0.8
gcode:
  {% set current = params.CURRENT|default(输入电机电流)|float %}
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={current}

## 自动进行速度与加速度测试
#[auto_speed]

## 在终端打印出Klipper变量
[gcode_macro DUMP_VARIABLES]
description: 在终端打印出Klipper变量，使用方法:[DUMP_VARIABLES NAME=stepper VALUE=extruder]，NAME表示变量名称包含的关键词，VALUE表示变量内容包含的关键，2个参数都是可选参数。
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

## 将单个变量的值和类型返回到终端。
[gcode_macro GET_VARIABLE]
description: 将单个变量的值和类型返回到终端。使用方法:[GET_VARIABLE NAME=toolhead]，NAME指定要检索的变量的名称，必填。
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

